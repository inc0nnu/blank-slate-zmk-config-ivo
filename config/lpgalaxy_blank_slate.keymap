/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE_L 0
#define NUM_L 1
#define SHIFT_L 2
#define NUM2_L 3
#define NAV_L 4
#define CONF_L 5

// Home row mods macro
#define HRML(k1,k2,k3,k4,k5) &ht LSHIFT k1 &ht LGUI k2 &ht LALT k3 &ht LCTRL k4 &ht LC(LS(LALT)) k5
#define HRMR(k1,k2,k3,k4,k5) &ht RC(RS(RALT)) k1 &ht RCTRL k2  &ht LALT k3 &ht RGUI k4 &ht RSHIFT k5

// Bluetooth
#define BT(n) BT_SEL n

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
    };

// Only turn off it the key is held for 2 seconds or longer.
&soft_off   {
    hold-time-ms = <2000>;
    };

/ {
    behaviors   {
        ht: hold_tap  {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            };
        };

    // NUM en SHIFT layers om naar NUM2 te komen
    conditional_layers  {
        compatible = "zmk,conditional-layers";
        tri_layer   {
            if-layers = <NUM_L SHIFT_L>;
            then-layer = <NUM2_L>;
            };
        };

    // Q en BKSP om op CONF layer te komen
    combos  {
        compatible = "zmk,combos";
        combo_settings  {
            timeout-ms = <150>;
            key-positions = <0 11>;
            bindings = <&to CONF_L>;
            };
        };

    macros  {
        smile: smile    {
            label = "ZM_smile";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp COLON &kp MINUS &kp RPAR>;
            };
        };

    chosen  {
        zmk,matrix_transform =
        #ifdef TBLE_DUAL_2U
            &dual_2u_transform;
        #elif defined(TBLE_MIT)
            &mit_transform;
        #else
            &ortho_transform;
        #endif
        };


    keymap  {
        compatible = "zmk,keymap";
        base_layer  {
            bindings = <
                &kp ESC   &kp Q    &kp W    &kp J      &kp R  &kp T     &kp Y &kp U &kp I     &kp O   &kp P     &kp BSPC
                &kp TAB   HRML(A,    S,      D,       F,       G)      HRMR(M,    N,    E,        L,      SEMI) &kp ENTER
                &none   &kp Z    &kp X    &kp C      &kp V  &kp B     &kp K &kp H &kp COMMA &kp DOT &kp FSLH  &kp DEL
                &none &none &none &none &mo NUM_L  &kp SPACE &mo SHIFT_L &mo NAV_L &none     &none   &none     &none
                >;
            };
        num_layer {
            bindings = < 
                &kp ESC &kp EXCL  &kp AT  &kp HASH &kp QMARK &kp DLLR  &kp PERCENT &kp AMPS  &kp LPAR  &kp RPAR &none    &kp BSPC
                &kp TAB HRML(N1,      N2,     N3,      N4,       N5)   HRMR(N6,        N7,       N8,       N9,      N0)  &kp ENTER
                &none   &kp GRAVE &kp SQT &kp DQT  &kp MINUS &kp PLUS  &kp STAR    &kp EQUAL &kp COMMA &kp DOT  &kp FSLH &none
                &kp ENTER &kp LEFT &kp DOWN &kp RIGHT &mo NUM_L     &kp SPACE 	   &mo SHIFT_L    &none     &none     &none    &none    &none 
                >;
            };
    	shift_layer {
            bindings = <
                &none &kp RS(Q) &kp RS(W)  &kp RS(J) &kp RS(R) &kp RS(T)   &kp LS(Y) &kp LS(U) &kp LS(I) &kp LS(O) &kp LS(P) &kp BSPC 
                &kp RS(TAB) HRML(RS(A),  RS(S),   RS(D),  RS(F),  RS(G))    HRMR(LS(M),   LS(N),  LS(E),   LS(L),  COLON) &kp LS(ENTER) 
                &none &kp RS(Z)  &kp RS(X)   &kp RS(C)   &kp RS(V)  &kp RS(B)      &kp LS(K)    &kp LS(H)   &kp LT &kp GT  &kp BSLH &kp LS(DEL) 
                &none &none &none &none  &mo NUM_L  &kp SPACE   &mo SHIFT_L  &none &none &none &none &none 
                >;
            };
        symbol2_layer {
            bindings = <
   	 	        &none &none   &none  &none &none &none       &none &kp CARET  &none  &none  &none &kp BSPC 
   	            &none &none &none &kp LBRC &kp LBKT &none &none  &kp RBKT &kp RBRC &none &none &none 
   	            &none &kp TILDE  &none &none &kp UNDER &kp PIPE    &none &none  &none  &smile  &none &none
                &none &none &none &none   &mo NUM_L   &none     &mo SHIFT_L   &none &none &none &none &none 
                >;
            };
        nav_layer {
            bindings = <
       	        &none &kp F1     &kp F2   &kp F3   &kp F4     &kp F5          &none        &kp LA(LEFT) &kp UP   &kp LA(RIGHT) &kp PAGE_UP   &kp LC(BSPC)
                &none &kp LSHIFT &kp LGUI &kp LALT &kp LCTRL &kp LC(LS(LALT)) &kp LC(LEFT) &kp LEFT     &kp DOWN &kp RIGHT     &kp LC(RIGHT) &kp LA(ENTER) 
                &none &kp F6     &kp F7   &kp F8   &kp F9     &kp F10         &none        &kp HOME     &none    &kp END       &kp PAGE_DOWN &kp LC(DEL)
                &none &none      &none    &none    &kp LSHIFT &kp SPACE       &none        &mo NAV_L    &none    &none         &none         &none
                >;
            };
    	config_layer {
            bindings = <
                &to 0 &none &none &none &none &none   &none  &none &none &none &none &none 
                &none &bt BT(0) &bt BT(1) &bt BT(2) &bt BT(3) &bt BT(4)    &none   &none &none &none &bt BT_CLR &none 
                &none &none &none &none &none &none         &none        &none &none &none &none &none 
                &none &none &none &none &kp B &kp B         &kp B        &kp B &none &none &none &none 
                >;
            };
    };
};