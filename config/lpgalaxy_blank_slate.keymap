/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

// layers
#define DEF 0
#define NUM 1
#define NAV 2
#define MOU 3
#define BLT 4

#define XXX &none
#define ___ &trans

// Home row mods macro
#define HRML(k1,k2,k3,k4,k5) &ht LSHIFT k1 &ht LGUI k2 &ht LALT k3 &ht LCTRL k4 &ht LC(LS(LALT)) k5
#define HRMR(k1,k2,k3,k4) &ht RC(RS(RALT)) k1 &ht RCTRL k2  &ht LALT k3 &ht RGUI k4

// Bluetooth
#define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3
#define _BTC_ &bt BT_CLR

/* ZMK_COMBOS */

#define ZMK_COMBO(name, combo_bindings, keypos, combo_layers, combo_timeout, combo_idle) \
     { \
        combos { \
            compatible = "zmk,combos"; \
            name { \
                timeout-ms = <combo_timeout>; \
                bindings = <combo_bindings>; \
                key-positions = <keypos>; \
                layers = <combo_layers>; \
                require-prior-idle-ms = <combo_idle>; \
            }; \
        }; \
    };

#define ZMK_LAYER(_name, layout) \
    / { \
        keymap { \
            compatible = "zmk,keymap"; \
            layer_ ## _name { \
                display-name = ZMK_HELPER_STRINGIFY(_name); \
                bindings = <layout>; \
            }; \
        }; \
    };

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

/ {
    behaviors {
        ht: hold_tap  {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };



    // Combos
ZMK_COMBO(bltoo,  &to BLT,       0 11     , DEF    , 70 , 100)  // go to bluetooth layer, only active on default layer
ZMK_COMBO(exclam, &kp EXCL,      2 3      , DEF NUM, 70 , 100)  // 
ZMK_COMBO(questi, &kp QMARK,     3 4      , DEF NUM, 70 , 100)  // 
ZMK_COMBO(squot,  &kp SQT,       7 8      , DEF NUM, 70 , 100)  // 
ZMK_COMBO(dquot,  &kp DQT,       8 9      , DEF NUM, 70 , 100)  // 
ZMK_COMBO(ldr1,   &kp LC(SPACE), 14 15 16 , DEF    , 70 , 100)  // 
ZMK_COMBO(ldr2,   &kp LC(SPACE), 19 20 21 , DEF    , 70 , 100)  // 
ZMK_COMBO(brackl, &kp LBKT,      14 15    , DEF NUM, 70 , 100)  // 
ZMK_COMBO(brackr, &kp RBKT,      15 16    , DEF NUM, 70 , 100)   // 
ZMK_COMBO(capsword, &capsword,   17 18    , DEF    , 70 , 100)   // 
ZMK_COMBO(parenl, &kp LPAR,      19 20    , DEF NUM, 70 , 100)   // 
ZMK_COMBO(parenr, &kp RPAR,      20 21    , DEF NUM, 70 , 100)   // 
ZMK_COMBO(colo,   &kp COLON,     21 22    , DEF NUM, 70 , 100)   // 
ZMK_COMBO(copy, &kp LC(C),       26 27    , DEF    , 70 , 100)   // 
ZMK_COMBO(paste, &kp LC(V),      27 28    , DEF    , 70 , 100)   // 
ZMK_COMBO(numword, &numword,     29 30    , DEF    , 70 , 100)   // 
ZMK_COMBO(bracel, &kp LBRC,      31 32    , DEF NUM, 70 , 100)   // 
ZMK_COMBO(bracer, &kp RBRC,      32 33    , DEF NUM, 70 , 100)   // 


    macros  {
        smile: smile    {
            label = "ZM_smile";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp COLON &kp MINUS &kp RPAR>;
            };
        };

    keymap  {
        compatible = "zmk,keymap";
        default_layer  {
            bindings = <
                &kp ESC   &kp Q    &kp W    &kp E      &kp R  &kp T     &kp Y &kp U &kp I     &kp O   &kp P     &kp BSPC
                &kp TAB   HRML(A,    S,      D,       F,       G)      HRMR(H,    J,    K,        L)  &kp SEMI  &kp ENTER
                &none   &kp Z    &kp X    &kp C      &kp V  &kp B     &kp N &kp M &kp COMMA &kp DOT &kp FSLH  &kp DEL
                &kp DEL XXX     XXX  XXX  &mo NUM  &kp SPACE   &kp LSHIFT   &mo NAV   XXX  XXX  XXX  XXX
                >;
            };
        num_layer {
            bindings = < 
                &kp ESC &kp TILDE  &kp AT  &kp HASH &kp DOLLAR &kp PERCENT &kp AMPS  &kp SQT &kp LPAR &kp RPAR &smile    &kp BSPC
                &kp TAB HRML(N1,      N2,     N3,      N4,       N5)   HRMR(N6,        N7,       N8,       N9) &kp N0  &kp ENTER
                XXX   &kp BSLH &kp TILDE &kp PIPE  &ht UNDER MINUS &kp PLUS  &kp STAR    &kp EQUAL &kp COMMA &kp DOT  &kp FSLH &kp DEL
                XXX  XXX  XXX  XXX  ___  ___  ___  ___  XXX  XXX  XXX  &kp SPACE
                >;
            };
        nav_layer {
            bindings = <
       	        &kp ESC  &kp F1    &kp F2   &kp F3   &kp F4  &kp F5  XXX   &kp LA(LEFT) &kp UP   &kp LA(RIGHT) &kp PAGE_UP   &kp LC(BSPC)
                &kp TAB  &kp LSHIFT &kp LGUI &kp LALT &kp LCTRL &kp LC(LS(LALT)) &kp LC(LEFT) &kp LEFT     &kp DOWN &kp RIGHT     &kp LC(RIGHT) &kp LA(ENTER) 
                XXX      &kp F6    &kp F7   &kp F8   &kp F9  &kp F10 XXX   &kp HOME   XXX     &kp END      &kp PAGE_DOWN         &kp LC(DEL)
                XXX  XXX  XXX  XXX  ___  ___  ___  ___  XXX  XXX  XXX  XXX
                >;
            };
        mouse_layer {
            bindings = <
       	        ___      ___      ___      ___      ___      ___      ___     leftclick  scrollup   rightclick   XXX  &kp LC(BSPC)
                &kp TAB  &kp LSHIFT &kp LGUI &kp LALT &kp LCTRL &kp LC(LS(LALT)) XXX  scrollleft  scrolldown  scrollright  XXX  &kp LA(ENTER) 
                XXX     ___     ___     ___     ___     ___      XXX   XXX   XXX   XXX   XXX   &kp LC(DEL)
                XXX     XXX     XXX     XXX     ___     ___     ___     ___  XXX   XXX   XXX   XXX
                >;
            };
    	bluetooth_layer {
            bindings = <
                &to DEF XXX   XXX   XXX   XXX   XXX   XXX   XXX   XXX   XXX    XXX     XXX
                XXX     _BT_SEL_KEYS_           XXX   XXX   XXX   XXX   XXX    _BTC_   XXX 
                XXX     XXX   XXX   XXX   XXX   XXX   XXX   XXX   XXX   XXX    XXX     XXX
                XXX     XXX   XXX   XXX   XXX   XXX   XXX   XXX   XXX   XXX    XXX     XXX 
                >;
            };
    };
};